#!/bin/sh
### BEGIN INIT INFO
# Provides:          patchtest
# Required-Start:    $local_fs mountvirtfs
# Required-Stop:     $local_fs
# Default-Start:     3 5
# Default-Stop:
# Short-Description: Execute patchtest and quits inmediately
# Description:       Execute patchtest (the framework to test mboxes)
#                    taking as input those file mboxes located at
#                    $base/mboxes folder and results are stored into
#                    $base/results
### END INIT INFO

test "$VERBOSE" != no && echo "Executing patchtest..."

# Mount point
MP="/patchtest"
test ! -d "$MP" && mkdir "$MP"
mount -t 9p -o trans=virtio test_mount "$MP" -oversion=9p2000.L,posixacl,cache=loose

MBOXES="$MP/mboxes"
RESULTS="$MP/results"
PW="$MP/patchwork"
PT="$MP/patchtest"
REPO="$MP/openembedded-core"
SUITESTART="$MP/patchtest-oe/tests"

HOME_ROOT="$(cut -f6 /etc/passwd -d':' | grep root)"
LOCAL_REPO="${HOME_ROOT}/openembedded-core"

# include patchtest related scripts into PATH
export PATH="$PW/git-pw/:$PT:$PT/scripts:$PATH"

# configure git
git config --global user.email guest@patchtest.com
git config --global user.name "Guest"

# temporal workaround to avoid the "too many open files" error
sysctl -w fs.file-max=100000

if [ -d $REPO ]; then
    # copy the share repo in locally
    cp -a $REPO $HOME_ROOT

    # clean local repo
    ( cd $LOCAL_REPO; git reset --hard; git clean -fd; )

    ( # python requires UTF-8
      export LC_ALL=en_US.UTF-8;
      export LANG=en_US.UTF-8;
      export LANGUAGE=en_US.UTF-8;

      # prepare the environment
      cd $LOCAL_REPO;
      source ./oe-init-build-env build;

      # execute patchtest through test-mboxes
      test-mboxes -r $LOCAL_REPO -s $SUITESTART -o $RESULTS $MBOXES; )
fi

# poweroff the machine
init 0

: exit 0
