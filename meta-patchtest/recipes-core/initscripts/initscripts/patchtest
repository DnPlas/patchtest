#!/bin/sh
### BEGIN INIT INFO
# Provides:          patchtest
# Required-Start:    $local_fs mountvirtfs
# Required-Stop:     $local_fs
# Default-Start:     3 5
# Default-Stop:
# Short-Description: Execute patchtest and quits inmediately
# Description:       Execute patchtest (the framework to test mboxes)
#                    taking as input those file mboxes located at
#                    $base/mboxes folder and results are stored into
#                    $base/results
### END INIT INFO

test "$VERBOSE" != no && echo "Executing patchtest..."

# Set patchtest home path
USER="patchtest"
HOME_USER="/home/patchtest"

# MP is the share directory between host and guest
MP="$HOME_USER/share"
test ! -d "$MP" && mkdir "$MP"

mount -t 9p -o trans=virtio test_mount "$MP" -oversion=9p2000.L,posixacl,cache=loose

# Define directory pathnames base on MP
MBOXES="$MP/mboxes"
RESULTS="$HOME_USER/results"
REPO="$MP/openembedded-core"
SUITESTART="$MP/patchtest-oe/tests"

# LOCAL_REPO is where patchtest will do its job which is outside MP
LOCAL_REPO="${HOME_USER}/openembedded-core"

# Temporal workaround to avoid the "too many open files" error
sysctl -w fs.file-max=100000

if [ -d $REPO ]; then
    # Make a local copy of REPO inside patchtest home
    cp -a $REPO $HOME_USER
    chown -R $USER $LOCAL_REPO

    # Clean local repo
    ( cd $LOCAL_REPO; git reset --hard; git clean -fd; )

    ( # lets test each mbox individually (and in its own build directory) in order to avoid contamination issues
      for MBOX in $MBOXES/*.mbox; do
	  CMD="pt $LOCAL_REPO $TMPBUILD $MBOX"
	  su -l -c "$CMD" $USER
      done
    )
fi

# Move results dir to MP as root
mv $RESULTS $MP/results

# Poweroff machine
init 0

: exit 0
