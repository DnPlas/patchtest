#!/bin/sh
### BEGIN INIT INFO
# Provides:          patchtest
# Required-Start:    $local_fs mountvirtfs
# Required-Stop:     $local_fs
# Default-Start:     3 5
# Default-Stop:
# Short-Description: Execute patchtest and quits inmediately
# Description:       Execute patchtest (the framework to test mboxes)
#                    taking as input those file mboxes located at
#                    $base/mboxes folder and results are stored into
#                    $base/results
### END INIT INFO

# Function that generates the command to be executed by patchest-user:
# - Include patchtest related scripts on PATH
# - cd into LOCAL_REPO and prepare bitbake environment
# - Execute patchtest through test-mboxes
function patchtest_cmd() {
    local TMPBUILD=$1
    local MBOX=$2
    cat << EOF
export PATH="$PW/git-pw/:$PT:$PT/scripts:$PATH" &&
cd $LOCAL_REPO &&
source ./oe-init-build-env $TMPBUILD &&
test-mboxes -r $LOCAL_REPO -s $SUITESTART -o $RESULTS $MBOX
EOF
}

test "$VERBOSE" != no && echo "Executing patchtest..."

# Set patchtest-user home path
PAT_USER="patchtest-user"
HOME_USER="$(cut -f6 /etc/passwd -d':' | grep $PAT_USER)"

# MP is the share directory between host and guest
MP="$HOME_USER/patchtest"
test ! -d "$MP" && mkdir "$MP"

mount -t 9p -o trans=virtio test_mount "$MP" -oversion=9p2000.L,posixacl,cache=loose

# Define directory pathnames base on MP
MBOXES="$MP/mboxes"
RESULTS="$HOME_USER/results"
PW="$MP/patchwork"
PT="$MP/patchtest"
REPO="$MP/openembedded-core"
SUITESTART="$MP/patchtest-oe/tests"

# LOCAL_REPO is where patchtest will do its job which is outside MP
LOCAL_REPO="${HOME_USER}/openembedded-core"

# Temporal workaround to avoid the "too many open files" error
sysctl -w fs.file-max=100000

if [ -d $REPO ]; then
    # Make a local copy of REPO inside patchtest-user home
    cp -a $REPO $HOME_USER
    chown -R $PAT_USER $LOCAL_REPO

    # Clean local repo
    ( cd $LOCAL_REPO; git reset --hard; git clean -fd; )

    ( # Python requires UTF-8
      export LC_ALL=en_US.UTF-8;
      export LANG=en_US.UTF-8;
      export LANGUAGE=en_US.UTF-8;

      # configure git, required for patchtest
      su -m --command "git config --global user.email patchtest-user@patchtest.com"
      su -m --command "git config --global user.name  patchtest-user"

      # lets test each mbox individually (and in its own build directory) in order to avoid contamination issues
      for MBOX in $MBOXES/*.mbox; do
	  # create temporal build folder
	  TMPBUILD=$(su -m --command "mktemp -d" $PAT_USER)

	  MBOXCMD=$(patchtest_cmd $TMPBUILD $MBOX)
	  su -m --command "echo -e Running \n\t'$MBOXCMD'" $PAT_USER
	  su -m --command "$MBOXCMD" $PAT_USER

	  # to be safe, remove temporal build folder
	  su -m --command "rm -rf $TMPBUILD" $PAT_USER
      done
    )
fi

# Move results dir to MP as root
mv $RESULTS $MP/results

# Poweroff machine
init 0

: exit 0
