#!/usr/bin/env python

import sys
import os
import unittest
import fileinput
import logging

# Include current path so test cases can see it
sys.path.insert(0, os.path.dirname(os.path.realpath(__file__)))

# Include patchtest library
sys.path.insert(0, os.path.join(os.path.dirname(os.path.realpath(__file__)), 'lib'))

from patchtestdata import PatchTestInput as pti

import utils
logger = utils.logger_create('patchtest')

import repo
from summary import BasicSummary

def getResult(series, revision, mbox):

    class PatchTestResult(unittest.TextTestResult):
        """ Formats the summary and post result at the end """

        PATCHWORK_RESULT_FAILURE = 'failure'
        PATCHWORK_RESULT_SUCCESS = 'success'
        PATCHWORK_RESULT_PENDING = 'pending'
        PATCHWORK_RESULT_WARNING = 'warning'

        shouldStop = True
        longMessage = True

        def startTestRun(self):
            # let's create the repo already, it can be used later on
            repoargs = {
                'repodir': pti.repodir,
                'commit': pti.commit,
                'branch': pti.branch,
                'mbox': mbox,
                'series': series,
                'revision': revision,
            }
            self.repo = pti.repo = repo.Repo(**repoargs)
            self.summary = BasicSummary()

            self.merge_failure = False # turns on in case all items failed the merging phase
            self.test_failure = False  # turns on in case of any testing failure
            self.test_error = False    # turns on in case of any exception raise

            try:
                self.repo.setup()
            except:
                self.error = True
                self.stop()

            try:
                if not pti.nopatch:
                    self.repo.merge(pti.storembox)
                    if self.repo.items and (not self.repo.any_merge()):
                        self.merge_failure = True
                        self.stop()
            except:
                self.error = True
                self.stop()

        def addError(self, test, err):
            self.test_error = True
            (ty, va, trace) = err
            logger.error(va)

        def addFailure(self, test, err):
            self.test_failure = True
            self.summary.addFailure(test, err)

        def addSuccess(self, test):
            self.summary.addSuccess(test)

        def addSkip(self, test, msg):
            self.summary.addSkip(test, msg)

        def stopTestRun(self):
            testname = pti.testname
            state = PatchTestResult.PATCHWORK_RESULT_FAILURE
            summary = self.summary.generateSummary(self.repo.items)

            logger.info(summary)

            if self.merge_failure:
                testname += '-merge-failure'
            else:
                if not self.test_failure:
                    state = PatchTestResult.PATCHWORK_RESULT_SUCCESS

            if not self.test_error and pti.post:
                self.repo.post(testname, state, summary)

            self.repo.clean(pti.keepbranch)

    return PatchTestResult

def main():
    # read the stdin if mbox/series/revision are passed this way
    if not sys.stdin.isatty():
        pti.namespace_stdin(fileinput.input('-'))

    # these variables contain either items from stdin or command line arguments
    listseries = list(pti.series)
    listrevision = list(pti.revision)
    listmbox = list(pti.mbox)

    if pti.multiple:
        # run tests on top of all input patches (mbox or series)
        run(listseries, listrevision, listmbox)
    else:
        # run tests for each input patch (mbox or series)
        if listseries:
            # check if lengths match, if not pad revisions with None
            difflength = len(listseries) - len(listrevision)
            listrevision.extend([None] * difflength)

            for series, revision in zip(listseries, listrevision):
                run(series=[series], revision=[revision])
        elif listmbox:
            for mbox in listmbox:
                run(mbox=[mbox])
        else:
            # no input given, just run
            run()

    return 0

def run(series=[], revision=[], mbox=[]):
    """ Load, setup and run tests """
    loader = unittest.TestLoader()
    suite = loader.discover(os.path.abspath(pti.testdir))

    # Get the result class and install the control-c handler
    unittest.installHandler()

    resultklass = getResult(series, revision, mbox)
    unittest.registerResult(resultklass)

    runner = unittest.TextTestRunner(resultclass=resultklass)

    try:
        result = runner.run(suite)
    except:
        logger.error('patchtest failed, removing patchtest branch')
        if repo:
            pti.repo.clean(False)

if __name__ == '__main__':
    ret = 1

    # Parse the command line arguments and store it on the PatchTestInput namespace
    pti.set_namespace()

    # create a .patchtest folder inside the repository, a place for patchtest logging and locking
    patchtestfolder = os.path.join(pti.repodir, '.patchtest')
    if not os.path.exists(patchtestfolder):
        os.mkdir(patchtestfolder)

    # Make sure only one patchtest instance is running under a repository
    lockfile = os.path.join(patchtestfolder, 'patchtest.lock')
    if os.path.exists(lockfile):
        logger.error('patchtest locked (currently running?). Remove %s in case no patchtest is running' % lockfile)
        sys.exit(ret)
    else:
        os.mknod(lockfile)

    # enable a file handle for logging
    logfile = os.path.join(patchtestfolder, 'log')
    logger.addHandler(logging.FileHandler(logfile))

    # set debugging level
    if pti.debug:
        logger.setLevel(logging.DEBUG)
        print logger.getEffectiveLevel()
    elif pti.quiet:
        logger.setLevel(logging.ERROR)

    try:
        ret = main()
    except Exception:
        import traceback
        traceback.print_exc(5)
    finally:
        try:
            os.remove(lockfile)
        except:
            logger.error('Patchtest lock file %s could not be removed')

    sys.exit(ret)
