#!/usr/bin/env python

import sys
import os
import unittest
import argparse
import fileinput
import json
import logging

# Include current path so test cases can see it
sys.path.insert(0, os.path.dirname(os.path.realpath(__file__)))

# Include patchtest library
sys.path.insert(0, os.path.join(os.path.dirname(os.path.realpath(__file__)), 'lib'))

import utils
logger = utils.logger_create('patchtest')

import repo
from summary import BasicSummary

# When parsing the arguments, the following class (PatchTestArgs)
# would be used as target namespace. This is a simple approach to
# pass arguments to the test case.
class PatchTestArgs:
    pass

class PatchTestResult(unittest.TextTestResult):
    """ Formats the summary and post result at the end """

    shouldStop = True

    def startTestRun(self):
        repoargs = {
            'repodir':PatchTestArgs.repodir,
            'commit':PatchTestArgs.commit,
            'branch':PatchTestArgs.branch,
            'mbox':PatchTestArgs.mbox,
            'series':PatchTestArgs.series,
            'revision':PatchTestArgs.revision,
        }
        self.repo = repo.Repo(**repoargs)
        self.summary = BasicSummary(commit=self.repo.commit,
                                    branch=self.repo.branch,
                                    mbox=self.repo.mbox)

        # these variables turn to True if either pathing or any test failed
        # in these case, the test's status would be 'failure'
        self.patch_error = False
        self.test_failure = False

        # these variables turn to True on any exception (RepoException, CmdException and any other
        # exception coming from the tests)
        self.repo_error = False
        self.cmd_error = False
        self.test_error = False

        try:
            self.repo.setup()
        except repo.PatchException as pe:
            self.patch_error = True
            self.summary.addPatchFailure(str(pe))
            self.stop()
        except repo.RepoException as re:
            self.repo_error = True
            logger.error(rp)
            self.stop()
        except utils.CmdException as ce:
            self.cmd_error = True
            logger.error("Command failed: %s %s %s" % (ce.cmd, ce.stdout, ce.stderr))
            self.stop()

    def addError(self, test, err):
        self.test_error = True
        (ty, va, trace) = err
        import traceback
        traceback.print_tb(trace)
        self.stop()

    def addFailure(self, test, err):
        self.test_failure = True
        self.summary.addFailure(test, err)

    def addSuccess(self, test):
        self.summary.addSuccess(test)

    def stopTestRun(self):
        # leave the working directory as it was, and remove branch if desired
        self.repo.clean(keepbranch=PatchTestArgs.keepbranch)

        # just post when there are no repository, commands and test exceptions
        if not (self.repo_error or self.cmd_error or self.test_error):
            # generate the summary
            summary = self.summary.generateSummary()
            logger.info(summary)

            # set the test status
            state = None
            if self.patch_error or self.test_failure:
                state = 'failure'
            else:
                state = 'success'

            # POST just if --post argument is present
            if PatchTestArgs.post:
                self.repo.post(PatchTestArgs.testname, state, summary)

def get_parser():
    parser = argparse.ArgumentParser()

    parser.add_argument('--series', '-s',
                        dest='series',
                        help='Series number')

    parser.add_argument('--revision', '-r',
                        dest='revision',
                        help='Revision number')

    parser.add_argument('--post',
                        dest='post',
                        action='store_true',
                        help="Post results to patchwork")

    parser.add_argument('--mbox', '-m',
                        dest='mbox',
                        help='An mbox file, to apply before testing')

    parser.add_argument('-C',
                        dest='repodir',
                        default=os.getcwd(),
                        help="Name of the repository where mboxs are applied")

    parser.add_argument('--test-name',
                        dest='testname',
                        default='patchtest',
                        help="Test name to be used if results are POSTed")

    parser.add_argument('--keep-branch',
                        dest='keepbranch',
                        action='store_true',
                        help="Do not POST the results to the PW instance")

    patchtest_tests_dir = os.path.join(
        os.path.dirname(os.path.realpath(__file__)),
        'tests')
    parser.add_argument('--test-dir',
                        dest='testdir',
                        default=patchtest_tests_dir,
                        help="Directory where tests are located")

    parser.add_argument('--branch', '-b',
                        dest='branch',
                        help="Branch to work on, default is master. Must be available in repo")

    parser.add_argument('--commit', '-c',
                        dest='commit',
                        help="Commit to work on, default is HEAD. Must be visible from branch")

    parser.add_argument('-d', '--debug', help='Enable debug output', action='store_true')
    parser.add_argument('-q', '--quiet', help='Print only errors', action='store_true')

    return parser

def main():
    get_parser().parse_args(namespace=PatchTestArgs)

    if PatchTestArgs.debug:
        logger.setLevel(logging.DEBUG)
        print logger.getEffectiveLevel()
    elif PatchTestArgs.quiet:
        logger.setLevel(logging.ERROR)

    listseries = []
    listmbox = []

    # read the stdin if series/revision are passed this way
    if not sys.stdin.isatty():
        logger.info('using stdin, ignoring parameters')
        for line in fileinput.input('-'):
            try:
                event = json.loads(line)
                series = event['series']
                parameters = event['parameters']
                revision = 1
                if parameters:
                    revision = parameters['revision']
                listseries.append((series, revision))
            except ValueError:
                listmbox.append(line)
        if listmbox and listseries:
            logger.warning('received both mbox and series/revision')
    elif PatchTestArgs.mbox:
        if PatchTestArgs.series:
            logger.error('patchwork-related parameters (--series) cannot be used with --mbox')
            return 1
        listmbox = [PatchTestArgs.mbox]
    elif (PatchTestArgs.series and PatchTestArgs.revision):
        listseries = [(PatchTestArgs.series, PatchTestArgs.revision)]
    else:
        # no arguments given, thus branch from current branch/commit and start testing
        run()

    for series, revision in listseries:
        PatchTestArgs.series = series
        PatchTestArgs.revision = revision
        run()

    for mbox in listmbox:
        PatchTestArgs.mbox = mbox
        run()

    return 0

def run():
    """ Load, setup and run tests, this is run for each item in listseries and/or listmbox"""
    loader = unittest.TestLoader()
    suite = loader.discover(os.path.abspath(PatchTestArgs.testdir))

    # Get the result class and install the control-c handler
    unittest.installHandler()
    unittest.registerResult(PatchTestResult)

    runner = unittest.TextTestRunner(resultclass=PatchTestResult)
    result = runner.run(suite)

if __name__ == '__main__':
    try:
        ret = main()
    except Exception:
        ret = 1
        import traceback
        traceback.print_exc(5)
    sys.exit(ret)
