#!/bin/bash
# ex:ts=4:sw=4:sts=4:et
# -*- tab-width: 4; c-basic-offset: 4; indent-tabs-mode: nil -*-
#
# patchtest-fetch-mboxes: Fetch mboxes from a patchwork instance given
#                         series/revisions ids
#
# Copyright (C) 2016 Intel Corporation
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License version 2 as
# published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.

# defaults values
repodir=''
mboxdir='mboxes'

function usage() {
    cat << EOF
\$ $(basename $0) -r <repodir> -m <mboxdir> <series[.revision]> ...

where

    <repodir>            : Repository
    <mboxdir>            : Directory where mboxes are stored. Defaults to $mboxdir
    <series[.revision]>  : Series id, with an optional revision. If not given, it will poll-events since the timestamp defined on .git-pw
EOF
>&2

    exit 1
}

while getopts ":r:m:h" opt; do
    case $opt in
	r)
	    repodir=$OPTARG
	    ;;
	m)
	    mboxdir=$OPTARG
	    ;;
	h)
	    usage
	    ;;
	\?)
	    echo "Invalid option: -$OPTARG" >&2
	    usage
	    ;;
	:)
	    echo "Option -$OPTARG requires an argument." >&2
	    usage
	    ;;
    esac
done
shift $((OPTIND-1))

[ -z "$repodir" ]   && { echo "Indicate the repository"; usage; }
[ ! -d $repodir ]   && { echo "Repository does not exit"; usage; }

series="$@"
# events come in pairs separated by a dot
if [ -z "$series" ]; then
    series="$(patchtest-poll-events $repodir)"
fi

if [ -n "$series" ]; then
    # create the mbox directory in case it does not exit
    [ ! -d $mboxdir ] && { mkdir -p $mboxdir; }

    # fetch series
    for s in $series; do
	sid="$(echo $s | cut -d. -f1)"
	cmd="git pw mbox $sid --link"
	# in case there is revision, consider it
	if echo $s | grep '\.' --quiet; then
	    rid="$(echo $s | cut -d. -f2)"
	    cmd="$cmd --revision $rid"
	    echo -e "Series/Revision $sid/$rid mbox"
	else
	    echo -e "Series/Revision $sid/latest mbox"
	fi
	$cmd > $mboxdir/$sid.$rid.mbox
	echo -e "\tStore into $mboxdir"
	echo -e ""
    done
else
    echo -e "No new series events"
fi
