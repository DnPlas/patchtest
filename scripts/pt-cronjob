#!/bin/bash
# ex:ts=4:sw=4:sts=4:et
# -*- tab-width: 4; c-basic-offset: 4; indent-tabs-mode: nil -*-
#
# pt-cronjob: fetch mboxes from patchwork at host and test them at
#             guest machine (qemu); once guest turns off, the host
#             post summary to the patchwork instance
#
# WARNING: it is assume that the image defined on 'meta-patchtest' layer has
#          already being created using Poky, thus the kernel and rootfs
#          full paths are passed as arguments. For more information, check
#          the documentation
#
# Copyright (C) 2016 Intel Corporation
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License version 2 as
# published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.

# Default values
sharefolder=''

pwurl='https://patchwork.openembedded.org'
pwproject='oe-core'
pwuser='nouser'
pwpass='nopass'

kernel='tmp/deploy/images/qemux86-64/bzImage-qemux86-64.bin'
rootfs='tmp/deploy/images/qemux86-64/core-image-patchtest-qemux86-64.ext4'

poky=''


function usage() {
    cat << EOF
\$ $(basename $0) [OPTION]

where OPTIONS are

    -s <sharefolder> : Share folder between host and guest. Default $sharefolder


    -u <pwurl>       : Patchwork URL. Default $pwurl
    -p <pwproject>   : Patchwork project. Default $pwproject
    -U <pwuser>      : Patchwork user. Default $pwuser
    -P <pwpass>      : Patchwork user pwd. $pwpass

    -k <kernel>      : QEMU kernel image. Default $kernel
    -r <rootfs>      : QEMU root filesystem. Default $rootfs

    -Y <poky>        : Poky repo used to source oe-init-build-env. Default $poky

EOF
>&2

    exit 1
}

while getopts ":s:u:p:U:P:k:r:Y:h" opt; do
    case $opt in
	s)
	    sharefolder=$OPTARG
	    ;;
	u)
	    pwurl=$OPTARG
	    ;;
	p)
	    pwproject=$OPTARG
	    ;;
	U)
	    pwuser=$OPTARG
	    ;;
	P)
	    pwpass=$OPTARG
	    ;;
	k)
	    kernel=$OPTARG
	    ;;
	r)
	    rootfs=$OPTARG
	    ;;
	Y)
	    poky=$OPTARG
	    ;;
	h)
	    usage
	    ;;
	\?)
	    echo "Invalid option: -$OPTARG" >&2
	    usage
	    ;;
	:)
	    echo "Option -$OPTARG requires an argument." >&2
	    usage
	    ;;
    esac
done

function cloneorpull() {
    local repo=$1
    local path=$2

    # if path exist, lets assume it is a git repo
    # clean, move to master and pull, otherwise
    # clone and pw configure
    if [ -d $path/.git ]; then
	(
	    cd $path

	    # "Clean" repository consists on the following
	    #    1 abort possible merges
	    #    2 reset working dir
	    #    3 clean non-tracked files
	    git am    --abort
	    git reset --hard
	    git clean -f -e ".git-pw*"

	    # Start always from master
	    git checkout master

	    # pull latest changes
	    git pull
	)
    else
	git clone $repo $path
    fi
}

function pwconfigure() {
    local path=$1
    local pwurl=$2
    local pwproject=$3
    local pwuser=$4
    local pwpass=$5

    (
	cd $path
	git config patchwork.default.url $pwurl
	git config patchwork.default.project $pwproject
	test $pwuser != "nouser" && git config patchwork.default.user $pwuser
	test $pwpass != "nopass" && git config patchwork.default.password $pwpass
    )
}

# Define repo location and names
PW=$sharefolder/patchwork
PT=$sharefolder/patchtest
SUITE=$sharefolder/patchtest-oe
REPO=$sharefolder/poky

# include scripts into PATH
export PATH="$PW/git-pw/:$PT:$PT/scripts:$PATH"

# make sure sharefolder folder is provided by user
test -z "$sharefolder" && { echo "Please provide a sharefolder folder"; usage; }

# make sure the poky build folder exists
test ! -d "$poky" && { echo "Please build a qemu machine according to the guest documentation"; exit 1; }

# create sharefolder
test ! -d $sharefolder && mkdir $sharefolder

# Clone or pull latest on required repos
cloneorpull https://github.com/dlespiau/patchwork.git $PW
cloneorpull https://git.yoctoproject.org/git/patchtest $PT
cloneorpull https://git.yoctoproject.org/git/patchtest-oe $SUITE
cloneorpull https://git.yoctoproject.org/git/poky $REPO

# Configure the repo to get latest mboxes
pwconfigure $REPO $pwurl $pwproject $pwuser $pwpass

# Get latest mboxes
fetch-mboxes -r $REPO -m $sharefolder/tmp/mboxes

# if new mboxes, just quit
test ! -d $sharefolder/tmp/mboxes && { echo "Exiting"; exit 0; }

# Check if old mboxes are present and backup these and its results
# TODO: we must thing on something smarter to store past results
# The first approach was the use of a git repository and git notes
# but in this case a branch needs to be created in every run
# and then use the post-summary script to get data from it.
# A simpler approach is just storing plain texts and it is
# the scripting does at the moment.
if [ -d $sharefolder/mboxes ]; then

    # Unique folder to store previous mboxes/results
    now="$(date --iso-8601=seconds)"

    # Define and create unique backup dir
    backup="$sharefolder/backup/$now"
    test ! -d $backup && mkdir -p $backup

    # backup mboxes
    mv $sharefolder/mboxes $backup/mboxes

    # backup results (if exists)
    test -d $sharefolder/results && mv $sharefolder/results $backup/results
fi

# Move latest mboxes
mv $sharefolder/tmp/mboxes $sharefolder/mboxes

# launch qemu. Machine is assumed to be in the default build folder (build)
(
    cd $poky
    if . $poky/oe-init-build-env build; then
	runqemu $kernel $rootfs	nographic kvm \
		qemuparams="-snapshot \
                            -fsdev local,id=test_dev,path=$sharefolder,security_model=mapped \
                            -device virtio-9p-pci,fsdev=test_dev,mount_tag=test_mount"
    else
	echo 'oe-init-build-env could not be sourced'
    fi
)

# Post patchtest results ($sharefolder/results) into patchwork
if [ $pwuser != "nouser" -a $pwpass != "nopass" ]; then
    post-summary -r $REPO -R $sharefolder/results
fi
