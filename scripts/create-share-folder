#!/usr/bin/env bash
# ex:ts=4:sw=4:sts=4:et
# -*- tab-width: 4; c-basic-offset: 4; indent-tabs-mode: nil -*-
#
# create-share: Create a share folder to be with guest machine
#
# Copyright (C) 2016 Intel Corporation
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License version 2 as
# published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.

# defaults values
SHAREDIR=''
PWURL='https://patchwork.openembedded.org'
PWPRO='oe-core'
PWUSER=''
PWPASS=''

function usage() {
    cat << EOF
\$ $(basename $0) OPTIONS [SERIES]

where OPTIONS are

    -s <share dir>   : Share directory
    -u <pw url>      : Patchwork URL. Default '$PWURL'
    -p <pw project>  : Patchwork project name. Default '$PWPRO'
    -U <pw user>     : Patchwork username. Default '$PWUSER'
    -P <pw password> : Patchwork username password. Default '$PWPASS'

EOF
>&2

    exit 1
}

while getopts ":s:u:p:U:P:h" opt; do
    case $opt in
	s)
	    SHAREDIR=$OPTARG
	    ;;
	u)
	    PWURL=$OPTARG
	    ;;
	p)
	    PWPRO=$OPTARG
	    ;;
	U)
	    PWUSER=$OPTARG
	    ;;
	P)
	    PWPASS=$OPTARG
	    ;;
	\?)
	    echo "Invalid option: -$OPTARG" >&2
	    usage
	    ;;
	:)
	    echo "Option -$OPTARG requires an argument." >&2
	    usage
	    ;;
    esac
done
shift $((OPTIND-1))

function set_patchwork_configs() {
    local URL=$1
    local PRO=$2
    local USER=$3
    local PASS=$4

    # Set git-pw configuration
    test -n "$URL" &&  git config patchwork.default.url $URL
    test -n "$PRO" &&  git config patchwork.default.project $PRO
    test -n "$USER" && git config patchwork.default.user $USER
    test -n "$PASS" && git config patchwork.default.password $PASS
}

# update (repository) can mean any of this:
#   1. clone if repository does not exist
#   2. clone if repository is not valid
#   3. clean not-tracked files and pull latest changes from remote
function update_repository() {
    # check input params are present
    [ -z "$1" -o -z "$2" ] && { return; }

    local REPOREMOTE=$1
    local REPODIR=$2

    if [ ! -d $REPODIR ]; then
	git clone $REPOREMOTE $REPODIR
    else
	# if not a valid git repo, remove it and clone it again
	(
	    CDIR="$PWD"
	    cd $REPODIR
	    if ! git status > /dev/null 2>&1 ; then
		# if repo has patchwork configuration, extract it before removing the folder
		R_PWURL="$(grep  -A4 '\[patchwork' .git/config | grep url      | cut -f2 -d'=')"
		R_PWPRO="$(grep  -A4 '\[patchwork' .git/config | grep project  | cut -f2 -d'=')"
		R_PWUSER="$(grep -A4 '\[patchwork' .git/config | grep user     | cut -f2 -d'=')"
		R_PWPASS="$(grep -A4 '\[patchwork' .git/config | grep password | cut -f2 -d'=')"

		cd $CDIR;rm -rf $REPODIR
		git clone $REPOREMOTE $REPODIR

		cd $REPODIR;set_patchwork_configs $R_PWURL $R_PWPRO $R_PWUSER $R_PWPASS
	    fi
	)

	# do some basic cleaning
	(
	    cd $REPODIR
	    git am --abort --quiet
	    git reset --hard --quiet
	    git clean -f -e ".git-pw*" --quiet
	)
	
	# pull latest changes
	( cd $REPODIR; git pull )
    fi
}

# main
if [ -z "$SHAREDIR" ]; then
    echo "Provide a share pathname, where share data would be stored between host and guest"
    usage
else
    [ ! -d $SHAREDIR ]  && { mkdir $SHAREDIR; }
fi

SHAREDIR=$(readlink -e $SHAREDIR)

# update repos
update_repository git://git.yoctoproject.org/patchwork $SHAREDIR/patchwork
update_repository git://git.yoctoproject.org/patchtest $SHAREDIR/patchtest
update_repository git://git.yoctoproject.org/patchtest-oe $SHAREDIR/patchtest-oe
update_repository git://git.openembedded.org/openembedded-core $SHAREDIR/openembedded-core
update_repository git://git.openembedded.org/bitbake $SHAREDIR/openembedded-core/bitbake

# finally overwrite previous git's pw settings with the ones pass by the user
cd $SHAREDIR/openembedded-core; set_patchwork_configs $PWURL $PWPRO $PWUSER $PWPASS

