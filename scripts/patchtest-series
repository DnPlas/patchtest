#!/usr/bin/python
# ex:ts=4:sw=4:sts=4:et
# -*- tab-width: 4; c-basic-offset: 4; indent-tabs-mode: nil -*-
#
# test-series: run patchtest from specific timestamp (since) and report
#              raw results
#
# Copyright (C) 2016 Intel Corporation
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License version 2 as
# published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.

from sys import exit, stderr
from argparse import ArgumentParser
from subprocess import check_output, PIPE, Popen, CalledProcessError
from json import loads
from scripts_utils import past
from collections import OrderedDict
import logging

def logger_create(name):
    logger = logging.getLogger(name)
    loggerhandler = logging.StreamHandler()
    loggerhandler.setFormatter(logging.Formatter("%(message)s"))
    logger.addHandler(loggerhandler)
    logger.setLevel(logging.INFO)
    return logger

logger = logger_create('test-series')
error = logger.error

def last_rev(events):
    """ Take last revisions from the new-series events"""
    listseries = OrderedDict()

    for event in events.splitlines():
        series = loads(event)
        s, r     = series['series'], series['parameters']['revision']
        listseries.update({s:r})

    return listseries

def main(since, repodir, startdir, json):

    cmd='cd %s; git pw poll-events --since %s --name series-new-revision' % (repodir, since)

    try:
        allseriesrev = check_output(cmd, shell=True)
        lastseriesrevs = last_rev(allseriesrev)
    except CalledProcessError as cpe:
        print 'make sure you have patchwork git-pw installed'
        return 1

    argjson = '-j' if json else ''
    patchtestcmd = 'patchtest - --branch master -C %s --start-dir %s %s' % (repodir, startdir, argjson)

    pwurl = check_output('cd %s; git config --get patchwork.default.url' % repodir, shell=True)
    pwpro = check_output('cd %s; git config --get patchwork.default.project' % repodir, shell=True)

    print 'Patchwork URL: %s Patchwork Project: %s' % (pwurl, pwpro)

    for series, revision in lastseriesrevs.iteritems():
        print 'Testing series %s revision %s' % (series, revision)

        gitpwcmd = 'cd %s; git pw mbox %s --revision %s' % (repodir, series, revision)
        patch = check_output(gitpwcmd, shell=True)
        p = Popen(patchtestcmd.split(), stdin=PIPE, stdout=PIPE, stderr=PIPE)
        results, stderr = p.communicate(patch)

        error('Exception from %s %s' % (series, revision))
        error(stderr)

        if results:
            for result in results.splitlines():
                print '{}'.format(result)

    return 0

if __name__ == '__main__':
    parser = ArgumentParser(description="Runs patchtest from series coming from patchwork since the given date")
    parser.add_argument('since',    help='Poll series since the specify date')
    parser.add_argument('repodir',  help='Repository directory')
    parser.add_argument('startdir', help='Path to test suite start directory')
    parser.add_argument('--json', '-j', action='store_true', dest='json', help='Print results in JSON format')

    args = parser.parse_args()

    ret=1
    try:
        ret = main(args.since, args.repodir, args.startdir, args.json)
    except:
        import traceback
        traceback.print_exc(5)

    exit(ret)
