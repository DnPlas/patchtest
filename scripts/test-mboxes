#!/bin/bash -eu
# ex:ts=4:sw=4:sts=4:et
# -*- tab-width: 4; c-basic-offset: 4; indent-tabs-mode: nil -*-
#
# patchtest-test-mboxes: (patch) Test the provided mboxes and if required,
#                        assemble those that can be merged into a branch
#                        with results as git-notes
#
# Copyright (C) 2016 Intel Corporation
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License version 2 as
# published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.

# default values
repodir=''
startdir=''
assemblebranch=''
startpoint='HEAD'
outputdir='results'

function testpatch() {
    local patch="$1"

    echo -e "${patch}"

    # run patchtest
    RESULTS=$(patchtest $patch --repo-dir $repodir --start-dir $startdir 2> /dev/null)

    # if output dir given, place results there inside mboxes as git notes
    if [ -n "$outputdir" ]; then
	patchfn=$(basename $patch)
	echo "$RESULTS" > $outputdir/${patchfn}
	echo -e "\tResults stored into '$outputdir'"
    fi

    # if assemble branch give, try to assemble as many as possible
    if [ -n "$assemblebranch" ]; then
	# move the assemblebranch
	git checkout $assemblebranch --quiet

	# try patch merge
	if git apply --check $patch 2> /dev/null; then
	    git am --quiet $patch 2> /dev/null
	    git notes add -m "$RESULTS"
	    echo -e "\tPatch merged into '${assemblebranch}' with results as git-notes"
	else
	    echo -e "\tNot merged due to a merge-conflict"
	fi
	git checkout $CURRENTB --quiet
    fi
    echo -e ""
}

function usage() {
    cat << EOF
\$ $(basename $0) -r <repodir> -s <startdir> -a <assemble branch> -p <start point> -o <outputdir> (mboxdir | <patch>) ...

where

    <repodir>         : Repository
    <startdir>        : Start directory for test discovery
    <assemble branch> : Branch name to assemble patches (that can be merged), including results as git-notes
    <start point>     : Start point for assemble branch. Defaults to $startpoint
    <outputdir>       : Output directory patchtest results. Defaults to $outputdir
    <mboxdir>         : Directory containing mboxes
    <patch>           : Patch to test by patchtest.
EOF
>&2

    exit 1
}

while getopts ":r:s:p:a:o:h" opt; do
    case $opt in
	r)
	    repodir=$OPTARG
	    ;;
	s)
	    startdir=$OPTARG
	    ;;
	p)
	    startpoint=$OPTARG
	    ;;
	a)
	    assemblebranch=$OPTARG
	    ;;
	o)
	    outputdir=$OPTARG
	    ;;
	h)
	    usage
	    ;;
	\?)
	    echo "Invalid option: -$OPTARG" >&2
	    usage
	    ;;
	:)
	    echo "Option -$OPTARG requires an argument." >&2
	    usage
	    ;;
    esac
done
shift $((OPTIND-1))

[ -z "$repodir" ]   && { echo "Indicate the repository"; usage; }
[ ! -d $repodir ]   && { echo "Repository does not exit"; usage; }
[ ! -d $startdir ]  && { echo "Test suite starting directory does not exist"; usage; }
[ ! -d $outputdir ] && { mkdir -p $outputdir; }

# get current branch
CURRENTB=$(git rev-parse --abbrev-ref HEAD)

# create assemblebrach
if [ -n "$assemblebranch" ]; then
    git branch $assemblebranch $startpoint
fi

for item in "$@"; do
    # if item is a directory, get all files and test each
    if [ -d $item ]; then
	for patch in $(find $item -type f | sort -n); do
	    testpatch $patch
	done
    else
	testpatch $item
    fi
done
